var fs=require('fs');
var path=require('path');
var crypto = require('crypto');
var commonJS="../assets/js/common.js";

module.exports=updateHTML;

var createHash = function (file, len) {
    return crypto.createHash('md5').update(file).digest('hex').substr(0, len);
};


function updateHTML(htmlDir,len){
	this.htmlDir=htmlDir;
  this.md5Length=len;
}

updateHTML.prototype.run=function(callback){
  var buf = fs.readFileSync(path.join(__dirname,'../../release/assets/js/common.js'));
  var md5 = createHash(buf,this.len);
	var self=this;
	//var htmlDir='release/views/';
    var counter=0;
    //成功的文件个数
    var succounter=0;

    fs.readdir(this.htmlDir,function(err,filesPaths){
        filesPaths.forEach(function(filesPath){
            var fileName=self.htmlDir+"/"+filesPath;
            var stat = fs.lstatSync(fileName);
            var isDir=stat.isDirectory();
            //是否目录
            if(!isDir){
              counter++;
              fs.readFile(fileName,function(err,data){

              if(err){
                  console.log(fileName+"读取失败"+err);
              }else{
                var htmlStr=data.toString();
                var weightCss=htmlStr.substring(htmlStr.indexOf('<!-- 组件css资源 start-->'),htmlStr.indexOf('<!-- 组件css资源 end-->')+'<!-- 组件css资源 end-->'.length);
                htmlStr= htmlStr.replace(weightCss,"");
                var preHtml=htmlStr.substring(0,htmlStr.indexOf('<!-- 公共的js资源 start-->')+'<!-- 公共的js资源 start-->'.length);
                var nextHtml=htmlStr.substring(htmlStr.indexOf('<!-- 公共的js资源  end-->'),htmlStr.length)
                var newHtmlStr=preHtml+'\n<script type="text/javascript" src="'+commonJS+'?v='+md5+'"></script>\n'+nextHtml;
                fs.writeFile(fileName,newHtmlStr,function(err){
                    if(err){
                      console.log("写入失败:"+err);
                    }else{
                      succounter++;
                      //console.log('文件写入完毕...'+fileName +"内容为:"+newHtmlStr);
                    }

                    if(counter==succounter){
                    	if(typeof callback=="function"){
                    			callback();	
                    	}
                    }

                    // console.log("此次counter的值为"+counter);
                    // console.log("此次succounter的值为"+succounter);

                });

              }
          })
            }
        })
      })


	// fs.readdir(this.rootPath,function(err,files){
	// 	if(err){
	// 		console.log('出现错误..'+err);
	// 	}else{
	// 		 files.forEach(function(fileName){
	// 		 	var filePath=path.join(self.rootPath,fileName);
	// 			 fs.readFile(filePath,function(err,data) {
	// 				 if (err) {
	// 					 console.log('出现错误..'+err);
	// 				 } else {
	// 					 var htmlStr = data.toString();

	// 					 var reg=new RegExp("\\/"+self.oldPrefix,"g");

	// 					 htmlStr=htmlStr.replace(reg,"/"+self.newPrefix);
	// 					 fs.writeFile(filePath,htmlStr,function(err){
 // 							 if (err) {
	// 								 console.log('出现错误..'+err);
	// 							}else{
	// 								//console.log('replace finnish...');
	// 							}
	// 					 })

	// 					 // console.log(htmlStr);
	// 				 }

	// 			 });

	// 		 });
	// 	}
	// })

}



